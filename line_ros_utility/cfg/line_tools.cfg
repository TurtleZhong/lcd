#!/usr/bin/env python
PACKAGE = "line_ros_utility"

from dynamic_reconfigure.parameter_generator_catkin import *
import math

gen = ParameterGenerator()

# To add or change a parameter: gen.add(name, type, OR, description, value, min, max)
gen.add("max_dist_between_planes", double_t, 0,
        'Defines the maximum distance between the mean of all inliers of two planes so that the planes count as adjecent.',
        0.1, 0.0, 2.0)
gen.add('rectangle_offset_pixels', double_t, 0,
        'The rectangles to find points next to a line is moved away from the line by this offset.',
        0.5, 0.0, 2.0)
gen.add('max_relative_rect_size', double_t, 0,
        'Defines the maximum length of the side of the rectangle perpendicular to the line relative to the line length.',
        0.5, 0.0, 1.0)
gen.add('max_absolute_rect_size', double_t, 0,
        'Defines the maximum length of the side of the rectangle perpendicular to the line in pixels.',
        5.0, 2.0, 20.0)
gen.add('num_iter_ransac', int_t, 0,
        'Defines the maximum numbers of iteration the RANSAC will perform for plane fitting.',
        100, 1, 1000)
gen.add('max_error_inlier_ransac', double_t, 0,
        'The maximum distance for a point to the plane for the point to count as an inlier.',
        0.005, 0.0, 0.5)
gen.add('inlier_max_ransac', double_t, 0,
        'The RANSAC terminates as soon as it found this fraction of inliers.',
        0.8, 0.0, 1.0)
gen.add('min_inlier_ransac', double_t, 0,
        'The solution found by RANSAC counts as valid if at least this fraction of the points are inliers.',
        0.1, 0.0, 1.0)
gen.add('min_points_in_line', int_t, 0,
        'At least this amount of points need to lie near the line in 3D so that it counts as a valid line.',
        10, 2, 100)
gen.add('max_deviation_inlier_line_check', double_t, 0,
        'If a point has this distance to a line, it counts as near for the purpose of checking if the line is valid.',
        0.01, 0.0, 1.0)
gen.add('max_rating_valid_line', double_t, 0,
        'If a line got this rating, it counts as valid. NOTE This parameter is effective in the range 0-1e2.',
        1e3, 0.0, 1e6)
gen.add('min_distance_between_points_hessian', double_t, 0,
        'This is the minimum distance squared that three points need to have, so that a plane is fitted to them.',
        1e-6, 0, 1e-3)
gen.add('max_cos_theta_hessian_computation', double_t, 0,
        'If the cosine of the angle between to vectors is smaller than this parameter, no plane is fitted to them because of numerical stability.',
        0.994, 0.95, 1)
gen.add('number_of_clusters', int_t, 0,
        'Number of clusters for kmeans.',
        5, 1, 20)
gen.add('canny_edges_threshold1', int_t, 0,
        'First threshold for the hysteresis procedure.',
        50, 1, 200)
gen.add('canny_edges_threshold2', int_t, 0,
        'Second threshold for the hysteresis procedure.',
        200, 1, 500)
gen.add('hough_detector_rho', double_t, 0,
        'Distance resolution of the accumulator in pixels.',
        1, 0.1, 20.0)
gen.add('hough_detector_theta', double_t, 0,
        'Angle resolution of the accumulator in radians.',
        math.pi/180, 0.0, math.pi/90)
gen.add('hough_detector_threshold', int_t, 0,
        'Accumulator threshold parameter. Only those lines are returned that get enough votes (> threshold).',
        10, 1, 200)
gen.add('hough_detector_minLineLength', double_t, 0,
        'Minimum line length. Line segments shorter than that are rejected.',
        10, 1, 200)
gen.add('hough_detector_maxLineGap', double_t, 0,
        'Maximum allowed gap between points on the same line to link them.',
        10, 1, 200)
# ENUMS
detector_enum = gen.enum([gen.const("LSD", int_t, 0, "LSD detector"),
                          gen.const("EDL", int_t, 1, "EDL detector"),
                          gen.const("FAST", int_t, 2, "FAST detector"),
                          gen.const("HOUGH", int_t, 3, "HOUGH detector")],
                         "Set the line detector")
gen.add("detector", int_t, 0,
        'Set the line detector method.',
        0, 0, 3, edit_method=detector_enum)
cluster_enum = gen.enum([gen.const("Clustering", int_t, 0, "With Clustering"),
                         gen.const("No_Clustering", int_t, 1, "No Clustering"),
                         gen.const("GroundTruth", int_t, 2, "Ground Truth Clustering")],
                        'Activate clustering')
gen.add("clustering", int_t, 0,
        'Activate Clustering',
        1, 0, 2, edit_method=cluster_enum)
canny_enum = gen.enum([gen.const("3", int_t, 3, "3"),
                         gen.const("5", int_t, 5, "5"),
                         gen.const("7", int_t, 7, "7")],
                        'Set aperture size.')
gen.add("canny_edges_aperture", int_t, 0,
        'Aperture size for the Sobel() operator.',
        3, 3, 7, edit_method=canny_enum)

exit(gen.generate(PACKAGE, "detect_cluster_show", "line_tools"))
