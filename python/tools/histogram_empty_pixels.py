""" Creates a histogram showing the percentages of nonempty pixels in the
    virtual-camera images in the dataset, by reading the percentages, the
    distance of the virtual camera from the lines and the threshold used to
    determine whether a line is valid or not from a textfile generated by
    get_virtual_camera_image.py.
"""
import argparse
import matplotlib.pyplot as plt
import numpy as np


def display_histogram(textfile_path):
    """ Displays the histogram of percentages of nonempty pixels in the
        virtual-camera images in the dataset.

    Args:
        textfile_path (string): Path of the textfile generated by
            get_virtual_camera_image.py that contains the percentages, the
            distance of the virtual camera from the lines and the threshold used
            to determine whether a line is valid or not.
    """
    hist_percentage = []

    num_lines = 0
    num_lines_discarded = 0

    with open(textfile_path, 'r') as f:
        lines = f.readlines()
        # Read distance of the virtual camera from the lines.
        distance = float(lines[0].split('distance=')[1])
        # Read minimum required fraction of nonempty pixels in the
        # virtual-camera image for a line to be considered as valid.
        fraction_nonempty_pixels_threshold = float(
            lines[1].split('fraction_nonempty_pixels_threshold=')[1])

        for line in lines[2:]:
            hist_percentage.append(float(line))
            num_lines += 1
            if (float(line) < 100. * fraction_nonempty_pixels_threshold):
                num_lines_discarded += 1

    print("Total number of lines is {}".format(num_lines))
    print("Number of lines discarded is {0} ({1:.3f} %)".format(
        num_lines_discarded, 100 * num_lines_discarded / float(num_lines)))

    plt.figure("Histogram of percentages of nonempty pixels")
    plt.hist(x=hist_percentage, bins=np.arange(-0.5, 101.5, 1), density=True)
    plt.gca().set_xticklabels(
        ['{:.0f}%'.format(x) for x in plt.gca().get_xticks()])
    plt.xlabel("Percentage of nonempty pixels")
    plt.ylabel("Normalized frequency")
    # Draw line showing the fraction-of-nonempty-pixels threshold used.
    plt.axvline(
        x=fraction_nonempty_pixels_threshold * 100.,
        color='k',
        linestyle='dashed',
        linewidth=1)
    plt.title(
        "Virtual camera {0:.3f} meters away from the lines".format(distance))

    plt.show()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Creates a histogram of nonempty-pixel percentages by ' +
        'reading the latter from a textfile.')
    parser.add_argument("-textfile_path", help="Path of the textfile.")
    args = parser.parse_args()
    if (args.textfile_path):
        textfile_path = args.textfile_path
    else:
        textfile_path = "hist_percentages.txt"

    display_histogram(textfile_path=textfile_path)
